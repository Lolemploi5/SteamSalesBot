#!/usr/bin/env python3
"""
Steam Sales Bot - Telegram Bot pour notifier les jeux Steam gratuits
V√©rifie uniquement les vraies promotions -100% (pas les jeux F2P de base)
"""

import json
import os
import logging
import requests
import asyncio
import threading
import time
import signal
from datetime import datetime
from typing import Dict, List, Set
from http.server import HTTPServer, BaseHTTPRequestHandler
from string import Template

import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.error("‚ùå TELEGRAM_TOKEN environment variable is required!")
    logger.error("üí° Set it with: export TELEGRAM_TOKEN='your_bot_token'")
    logger.error("ü§ñ Get your token from @BotFather on Telegram")
    exit(1)
    
STEAM_API_URL = "https://store.steampowered.com/api/featured/"
SENT_GAMES_FILE = "sent_games.json"
TIMEZONE = pytz.timezone('Europe/Paris')

# Constantes
CONTENT_TYPE_JSON = 'application/json'
CONTENT_TYPE_HTML = 'text/html'
PORT = int(os.getenv('PORT', 8000))

TEMPLATE_DIR = os.path.join(os.path.dirname(__file__), "templates")


def render_template(name, **context):
    path = os.path.join(TEMPLATE_DIR, name)
    with open(path, "r", encoding="utf-8") as f:
        template = Template(f.read())
    return template.safe_substitute(**context)


# Serveur HTTP minimal pour Render
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', CONTENT_TYPE_JSON)
            self.end_headers()
            
            status = {
                "status": "healthy",
                "service": "Steam Sales Bot",
                "timestamp": datetime.now(TIMEZONE).isoformat(),
                "scheduled_checks": "9:00 and 19:00 Europe/Paris",
                "total_users": len(steam_bot.chat_ids) if 'steam_bot' in globals() else 0
            }
            self.wfile.write(json.dumps(status, indent=2).encode())
            
        elif self.path.startswith('/subscribe/'):
            # Endpoint d'inscription: /subscribe/CHAT_ID
            try:
                chat_id = int(self.path.split('/')[-1])
                
                # Ajouter le chat_id √† la liste
                if 'steam_bot' in globals():
                    steam_bot.add_chat_id(chat_id)
                    
                self.send_response(200)
                self.send_header('Content-type', CONTENT_TYPE_HTML)
                self.end_headers()
                
                html = render_template('success.html', chat_id=chat_id, total_users=len(steam_bot.chat_ids) if 'steam_bot' in globals() else 0)
                self.wfile.write(html.encode())
                
                logger.info(f"‚úÖ Nouvel utilisateur inscrit: {chat_id}")
                
            except (ValueError, IndexError):
                self.send_response(400)
                self.send_header('Content-type', CONTENT_TYPE_HTML)
                self.end_headers()
                self.wfile.write(b"<h1>Erreur: Chat ID invalide</h1><p><a href='/'>Retour</a></p>")
        
        else:
            self.send_response(200)
            self.send_header('Content-type', CONTENT_TYPE_HTML)
            self.end_headers()
            
            html = render_template('index.html', total_users=len(steam_bot.chat_ids) if 'steam_bot' in globals() else 0, last_update=datetime.now(TIMEZONE).strftime('%H:%M'))
            self.wfile.write(html.encode())
    
    def log_message(self, format, *args):
        # Supprimer les logs HTTP pour √©viter le spam
        pass

def start_http_server():
    """D√©marre le serveur HTTP pour Render"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), HealthCheckHandler)
        logger.info(f"üåê Serveur HTTP d√©marr√© sur le port {PORT}")
        server.serve_forever()
    except OSError as e:
        if "Address already in use" in str(e):
            logger.info(f"‚ö†Ô∏è Port {PORT} d√©j√† utilis√© - serveur HTTP ignor√© (normal sur Render)")
        else:
            logger.error(f"Erreur serveur HTTP: {e}")

class SteamSalesBot:
    def __init__(self):
        self.sent_games: Dict = self.load_sent_games()
        self.chat_ids: Set[int] = set(self.sent_games.get('chat_ids', []))
        
    def load_sent_games(self) -> Dict:
        """Charge les jeux d√©j√† envoy√©s depuis le fichier JSON"""
        try:
            if os.path.exists(SENT_GAMES_FILE):
                with open(SENT_GAMES_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return {"sent_games": {}, "chat_ids": []}
        except Exception as e:
            logger.error(f"Erreur lors du chargement de {SENT_GAMES_FILE}: {e}")
            return {"sent_games": {}, "chat_ids": []}
    
    def save_sent_games(self):
        """Sauvegarde les jeux envoy√©s dans le fichier JSON"""
        try:
            data = {
                "sent_games": self.sent_games.get("sent_games", {}),
                "chat_ids": list(self.chat_ids)
            }
            with open(SENT_GAMES_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde de {SENT_GAMES_FILE}: {e}")
    
    def add_chat_id(self, chat_id: int):
        """Ajoute un chat_id √† la liste des destinataires et envoie une notification de bienvenue"""
        is_new_user = chat_id not in self.chat_ids
        self.chat_ids.add(chat_id)
        self.save_sent_games()
        logger.info(f"Chat ID {chat_id} ajout√© √† la liste des destinataires")
        
        # Envoyer une notification de bienvenue si c'est un nouvel utilisateur
        if is_new_user:
            try:
                # V√©rifier s'il y a un event loop actif
                try:
                    asyncio.get_running_loop()
                    # Si on est dans un event loop existant, cr√©er une t√¢che
                    welcome_task = asyncio.create_task(self.send_welcome_notification(chat_id))
                    self._welcome_tasks = getattr(self, '_welcome_tasks', set())
                    self._welcome_tasks.add(welcome_task)
                    welcome_task.add_done_callback(self._welcome_tasks.discard)
                except RuntimeError:
                    # Pas d'event loop actif, utiliser l'API HTTP directe
                    self.send_welcome_notification_sync(chat_id)
            except Exception as e:
                logger.warning(f"Erreur lors de l'envoi de la notification de bienvenue: {e}")
    
    def send_welcome_notification_sync(self, chat_id: int):
        """Envoie une notification de bienvenue via l'API HTTP Telegram (version synchrone)"""
        try:
            welcome_message = f"""üéâ **Bienvenue sur Steam Sales Bot !**

‚úÖ **Inscription confirm√©e !**
üÜî **Votre Chat ID :** `{chat_id}`

üéÆ **Ce que vous recevrez :**
‚Ä¢ Notifications automatiques √† 9h et 19h (heure de Paris)
‚Ä¢ Jeux Steam en vraie promotion -100% uniquement
‚Ä¢ Pas de spam, seulement les vraies bonnes affaires !

üîç **Commandes disponibles :**
‚Ä¢ `/start` - Afficher le menu principal
‚Ä¢ `/check` - V√©rifier manuellement les promotions

üåê **Partagez le bot :** https://t.me/Steam_Sales_Notifier_Bot

‚ö° **Premi√®re v√©rification en cours...**"""

            # Envoyer via l'API HTTP Telegram
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': welcome_message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"‚úÖ Notification de bienvenue envoy√©e √† {chat_id}")
            else:
                logger.warning(f"‚ö†Ô∏è Erreur envoi notification bienvenue (HTTP {response.status_code})")
                
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la notification de bienvenue: {e}")
    
    async def send_welcome_notification(self, chat_id: int):
        """Envoie une notification de bienvenue √† un nouvel utilisateur"""
        try:
            # V√©rifier si le token Telegram est disponible
            token = os.environ.get('TELEGRAM_BOT_TOKEN')
            if not token:
                logger.warning("Token Telegram non configur√© - notification de bienvenue ignor√©e")
                return
                
            # Cr√©er un bot temporaire pour envoyer la notification
            bot = Bot(token=token)
            
            welcome_message = f"""üéâ **Bienvenue sur Steam Sales Bot !**

‚úÖ **Inscription confirm√©e !**
üÜî **Votre Chat ID :** `{chat_id}`
üë• **Vous rejoignez {len(self.chat_ids)} gamers inscrits**

üéÆ **Ce que vous allez recevoir :**
‚Ä¢ Notifications instantan√©es des jeux Steam en vraie promotion -100%
‚Ä¢ Exclusion des jeux gratuits de base (pas de spam)
‚Ä¢ Liens directs vers Steam pour t√©l√©charger imm√©diatement
‚Ä¢ V√©rifications automatiques √† 9h et 19h (Europe/Paris)

üîî **Prochaines notifications :**
‚Ä¢ **Automatiques** : 9h00 et 19h00 tous les jours
‚Ä¢ **√Ä la demande** : Utilisez la commande /check quand vous voulez

‚ö° **Important :** Je ne notifie que les **vraies promotions temporaires**, pas les jeux free-to-play permanents comme CS2, TF2, Dota 2, etc.

üéØ **Bon gaming et n'h√©sitez pas √† partager le bot !**

_Vous pouvez utiliser /check √† tout moment pour v√©rifier manuellement._"""
            
            await bot.send_message(
                chat_id=chat_id,
                text=welcome_message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"‚úÖ Notification de bienvenue envoy√©e √† {chat_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'envoi de la notification de bienvenue √† {chat_id}: {e}")
            # Ne pas faire √©chouer l'inscription si la notification √©choue
    
    def get_free_games(self) -> List[Dict]:
        """R√©cup√®re uniquement les jeux en vraie promotion -100% (pas les F2P de base)"""
        try:
            response = requests.get(STEAM_API_URL, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            free_games = []
            
            # Ne v√©rifier que la section "specials" qui contient les vraies promotions
            if 'specials' in data and 'items' in data['specials']:
                for item in data['specials']['items']:
                    discount_percent = item.get('discount_percent', 0)
                    final_price = item.get('final_price', 0)
                    original_price = item.get('original_price', 0)
                    
                    # Conditions strictes pour une vraie promotion gratuite
                    if (discount_percent == 100 and 
                        final_price == 0 and 
                        original_price > 100):  # Plus de $1
                        
                        app_id = str(item.get('id', ''))
                        name = item.get('name', f'Jeu {app_id}')
                        original_price_dollars = original_price / 100
                        
                        if app_id and not self.is_game_already_sent(app_id):
                            if self._verify_real_promotion(app_id, name):
                                free_games.append({
                                    'app_id': app_id,
                                    'name': name,
                                    'url': f'https://store.steampowered.com/app/{app_id}/',
                                    'initial_price': original_price_dollars
                                })
            
            logger.info(f"Trouv√© {len(free_games)} vraies promotions gratuites (hors F2P)")
            return free_games
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des jeux en promotion: {e}")
            return []
    
    def _verify_real_promotion(self, app_id: str, game_name: str) -> bool:
        """V√©rifie qu'il s'agit vraiment d'une promotion et pas d'un F2P"""
        # Liste des jeux F2P connus √† exclure
        known_f2p_games = {
            '730', '440', '570', '238960', '386360', '444090', 
            '578080', '1222670', '359550', '252490'
        }
        
        if app_id in known_f2p_games:
            logger.info(f"Jeu F2P exclu: {game_name} (ID: {app_id})")
            return False
        
        return True  # Simplification pour √©viter trop de complexit√©
    
    def is_game_already_sent(self, app_id: str) -> bool:
        """V√©rifie si un jeu a d√©j√† √©t√© envoy√©"""
        return app_id in self.sent_games.get("sent_games", {})
    
    def mark_game_as_sent(self, app_id: str, game_name: str):
        """Marque un jeu comme envoy√©"""
        if "sent_games" not in self.sent_games:
            self.sent_games["sent_games"] = {}
        
        self.sent_games["sent_games"][app_id] = {
            "name": game_name,
            "sent_at": datetime.now(TIMEZONE).isoformat()
        }
        self.save_sent_games()
    
    async def send_free_games(self, context: ContextTypes.DEFAULT_TYPE, manual_check: bool = False):
        """Envoie les nouvelles promotions -100% √† tous les chats enregistr√©s"""
        free_games = self.get_free_games()
        
        if not free_games:
            if manual_check and self.chat_ids:
                for chat_id in self.chat_ids:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="üéÆ Aucune vraie promotion -100% trouv√©e actuellement sur Steam.\n\n"
                             "‚ÑπÔ∏è Je ne notifie que les jeux payants qui deviennent temporairement gratuits,\n"
                             "pas les jeux free-to-play de base (CS2, TF2, Dota 2, etc.)"
                    )
            return
        
        new_games = []
        for game in free_games:
            app_id = game['app_id']
            if not self.is_game_already_sent(app_id):
                new_games.append(game)
                self.mark_game_as_sent(app_id, game['name'])
        
        if not new_games:
            if manual_check and self.chat_ids:
                for chat_id in self.chat_ids:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="üéÆ Aucune nouvelle promotion -100% depuis la derni√®re v√©rification."
                    )
            return
        
        # Envoyer les nouveaux jeux √† tous les chats enregistr√©s
        for chat_id in self.chat_ids:
            try:
                if len(new_games) == 1:
                    game = new_games[0]
                    message = (f"üéÆ **Nouvelle promotion -100% sur Steam !**\n\n"
                             f"üéØ **{game['name']}**\n"
                             f"üí∞ Temporairement gratuit (normalement ${game['initial_price']:.2f})\n"
                             f"üîó [Obtenir le jeu maintenant]({game['url']})\n\n"
                             f"‚ö° **Promotion limit√©e dans le temps !**")
                else:
                    message = f"üéÆ **{len(new_games)} nouvelles promotions -100% sur Steam !**\n\n"
                    for game in new_games:
                        message += (f"üéØ **{game['name']}**\n"
                                  f"üí∞ Temporairement gratuit (normalement ${game['initial_price']:.2f})\n"
                                  f"üîó [Obtenir maintenant]({game['url']})\n\n")
                    message += "‚ö° **Promotions limit√©es dans le temps !**"
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
                
            except Exception as e:
                logger.error(f"Erreur lors de l'envoi √† {chat_id}: {e}")
        
        logger.info(f"Envoy√© {len(new_games)} nouvelles promotions √† {len(self.chat_ids)} chats")

# Instance globale du bot
steam_bot = SteamSalesBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /start"""
    if not update.effective_chat or not update.message:
        return
        
    chat_id = update.effective_chat.id
    steam_bot.add_chat_id(chat_id)
    
    keyboard = [[InlineKeyboardButton("üîç V√©rifier maintenant", callback_data="check_games")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = """üéÆ **Bienvenue sur Steam Sales Bot !**

Je vous notifierai automatiquement des jeux Steam en **vraie promotion -100%** (pas les jeux gratuits de base) tous les jours √† 9h et 19h (heure de Paris).

‚ö° **Ce que je surveille :**
‚Ä¢ Jeux payants qui deviennent temporairement gratuits
‚Ä¢ Promotions √† -100% sur des jeux normalement payants
‚Ä¢ Exclusion des jeux free-to-play de base (CS2, TF2, Dota 2, etc.)

üîç **V√©rification manuelle :** Utilisez le bouton ci-dessous ou `/check`

‚úÖ Vous √™tes maintenant inscrit aux notifications !"""
    
    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /check pour v√©rifier manuellement"""
    if not update.effective_chat or not update.message:
        return
        
    chat_id = update.effective_chat.id
    steam_bot.add_chat_id(chat_id)
    
    await update.message.reply_text("üîç V√©rification des promotions -100% en cours...")
    await steam_bot.send_free_games(context, manual_check=True)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestion des callbacks des boutons"""
    if not update.callback_query:
        return
        
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_games":
        if update.effective_chat:
            chat_id = update.effective_chat.id
            steam_bot.add_chat_id(chat_id)
        
        await query.edit_message_text("üîç V√©rification des promotions -100% en cours...")
        await steam_bot.send_free_games(context, manual_check=True)

def scheduled_check_sync():
    """V√©rification programm√©e des jeux en promotion (version synchrone)"""
    logger.info("V√©rification programm√©e des promotions -100%")
    try:
        free_games = steam_bot.get_free_games()
        if not free_games:
            logger.info("Aucune promotion disponible actuellement")
            return
            
        new_games = []
        for game in free_games:
            app_id = game['app_id']
            if not steam_bot.is_game_already_sent(app_id):
                new_games.append(game)
                steam_bot.mark_game_as_sent(app_id, game['name'])
        
        if not new_games:
            logger.info("Aucune nouvelle promotion trouv√©e")
            return
            
        if not steam_bot.chat_ids:
            logger.info("Aucun utilisateur inscrit pour recevoir les notifications")
            return
        
        # Envoyer les notifications automatiquement
        send_automatic_notifications(new_games)
        logger.info(f"Notifications envoy√©es pour {len(new_games)} nouveaux jeux")
        
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification programm√©e: {e}")

def send_automatic_notifications(new_games):
    """Envoie les notifications automatiques pour les nouveaux jeux"""
    import asyncio
    
    async def send_notifications():
        """Envoie les notifications de nouveaux jeux"""
        # V√©rifier que le token existe
        token = TELEGRAM_TOKEN
        if not token:
            logger.error("Token Telegram manquant pour les notifications automatiques")
            return
            
        bot = Bot(token=token)
        
        for chat_id in steam_bot.chat_ids:
            try:
                # Cr√©er le message
                if len(new_games) == 1:
                    game = new_games[0]
                    message = (f"üéÆ **Nouvelle promotion -100% sur Steam !**\n\n"
                             f"üéØ **{game['name']}**\n"
                             f"üí∞ Temporairement gratuit (normalement ${game['initial_price']:.2f})\n"
                             f"üîó [Obtenir le jeu maintenant]({game['url']})\n\n"
                             f"‚ö° **Promotion limit√©e dans le temps !**")
                else:
                    message = f"üéÆ **{len(new_games)} nouvelles promotions -100% sur Steam !**\n\n"
                    for game in new_games:
                        message += (f"üéØ **{game['name']}**\n"
                                  f"üí∞ Temporairement gratuit (normalement ${game['initial_price']:.2f})\n"
                                  f"üîó [Obtenir maintenant]({game['url']})\n\n")
                    message += "‚ö° **Promotions limit√©es dans le temps !**"
                
                # Envoyer le message
                await bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
                
            except Exception as e:
                logger.error(f"Erreur lors de l'envoi √† {chat_id}: {e}")
    
    # Ex√©cuter les notifications
    try:
        asyncio.run(send_notifications())
        logger.info(f"Envoy√© {len(new_games)} promotions √† {len(steam_bot.chat_ids)} utilisateurs")
    except Exception as e:
        logger.error(f"Erreur lors de l'envoi des notifications automatiques: {e}")

def main():
    """Fonction principale"""
    logger.info("D√©marrage du Steam Sales Bot (vraies promotions uniquement)...")
    
    # V√©rifier que le token est disponible
    if not TELEGRAM_TOKEN:
        logger.error("Token Telegram manquant - arr√™t du service")
        return
    
    # D√©marrer le serveur HTTP pour Render (en arri√®re-plan)
    http_thread = threading.Thread(target=start_http_server, daemon=True)
    http_thread.start()
    
    # Configuration et d√©marrage du bot Telegram
    telegram_working = False
    
    try:
        # Test simple de connexion sans cr√©er l'application compl√®te
        async def test_telegram_token():
            """Test rapide du token Telegram"""
            try:
                from telegram import Bot
                bot = Bot(token=TELEGRAM_TOKEN)
                bot_info = await bot.get_me()
                await bot.close()  # Fermer proprement la connexion
                logger.info(f"ü§ñ Bot Telegram disponible: @{bot_info.username}")
                logger.info(f"üîó Lien du bot: https://t.me/{bot_info.username}")
                return True
            except Exception as e:
                logger.error(f"Erreur de test token: {e}")
                return False
        
        # Tester le token
        token_valid = asyncio.run(test_telegram_token())
        
        if token_valid:
            telegram_working = True
            logger.info("‚úÖ Token Telegram valid√©")
            logger.info("ÔøΩ Commandes disponibles: /start, /check")
            logger.info("üåê Interface web: https://steamsalesbot.onrender.com")
            logger.info("üîÑ Bot Telegram sera d√©marr√© √† la demande pour les commandes")
        else:
            raise Exception("Token Telegram invalide")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Probl√®me avec le bot Telegram: {e}")
        logger.info("üîî Mode notifications automatiques uniquement")
        telegram_working = False
    
    # Configurer le scheduler pour les v√©rifications automatiques
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    
    # Programmer les v√©rifications √† 9h et 19h (heure de Paris)
    scheduler.add_job(
        scheduled_check_sync,
        trigger=CronTrigger(hour=9, minute=0, timezone=TIMEZONE),
        id='morning_check',
        replace_existing=True
    )
    
    scheduler.add_job(
        scheduled_check_sync,
        trigger=CronTrigger(hour=19, minute=0, timezone=TIMEZONE),
        id='evening_check',
        replace_existing=True
    )
    
    # D√©marrer le scheduler
    scheduler.start()
    logger.info("Scheduler d√©marr√© - V√©rifications programm√©es √† 9h et 19h (Europe/Paris)")
    
    try:
        # Configuration pour arr√™t propre
        def signal_handler(signum, frame):
            logger.info("Signal d'arr√™t re√ßu, fermeture propre...")
            try:
                scheduler.shutdown(wait=False)
                logger.info("Scheduler arr√™t√©")
            except Exception as e:
                logger.error(f"Erreur lors de l'arr√™t: {e}")
            finally:
                exit(0)
        
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        
        logger.info("‚úÖ Bot Steam Sales d√©marr√© avec succ√®s !")
        logger.info("üîî Les notifications automatiques sont actives")
        logger.info("üìÖ Prochaines v√©rifications: 9h et 19h (Europe/Paris)")
        
        if telegram_working:
            logger.info("üì± Bot Telegram op√©rationnel pour les notifications")
        else:
            logger.info("üì± Notifications uniquement (ajoutez votre chat_id manuellement)")
        
        # Faire une v√©rification initiale pour tester
        logger.info("üß™ Test initial de l'API Steam...")
        scheduled_check_sync()
        
        # Boucle principale pour maintenir le service actif
        logger.info("üîÑ Service en fonctionnement - Maintien de la connexion...")
        while True:
            time.sleep(60)  # V√©rifier toutes les minutes si le service doit s'arr√™ter
            
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur dans la boucle principale: {e}")
    finally:
        try:
            scheduler.shutdown()
        except Exception:
            pass
        logger.info("Bot arr√™t√© proprement")

if __name__ == '__main__':
    main()
